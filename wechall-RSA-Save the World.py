from Crypto.Util  import number
import numpy as np
from decimal import *

e1,e2,e3=3,3,3

n1=59468356241592366297319147772339205684803788236984487420731803885975137178520419001703516047645914850108396783047351677849028038517804391511352143693

c1=15378936412263122136671821939048239082366523685107702149661741440127700814605611442883792302466723668016190553475176351769887299517960948516128757202

n2=2654854685492739726126118969641437692990189038845768213943819985501962300253207600944457412332801141974695552358995808919629147234491375820901464217957

c2=901134102674005170807474852566356410630866710942848815053189933466899422268509375612718456872803396157328434812454502908399884660606192301304153874659

n3=585138976262093904256773989318676168977832998671522621191115448716329475153928206916402645723690463588795386652742718800309929290426964346922914989793

c3=103420157342707568761008150768980465173836267732118480764362857674792846615656790238906118879998206647500654385972950126052136831474283088874013028900

def cube_root(x):
    minprec = 27
    if len(x) > minprec: getcontext().prec = len(x)
    else:                getcontext().prec = minprec

    x = Decimal(x)
    power = Decimal(1)/Decimal(3)

    answer = x**power
    ranswer = answer.quantize(Decimal('1.'), rounding=ROUND_UP)

    diff = x - ranswer**Decimal(3)
    if diff == Decimal(0):
        print("m is the cubic number of", ranswer)
    else:
        print("m has a cubic root of ", answer)
def chinese_reminder(c,n):
    s=[]
    mul_n=int(np.prod(n))
    N=[mul_n//n[i] for i in range(len(n))]
    M=[number.inverse(N[i],n[i]) for i in range(len(n))]
    for i in range(len(n)):
        s.append(c[i]*N[i]*M[i])
    CRT=pow(int(sum(s)),1,mul_n)
    return CRT
n=[n1,n2,n3]
c=[c1,c2,c3]
result_CRT=chinese_reminder(c,n)
print(result_CRT)
m=cube_root(str(result_CRT))
print(m)


